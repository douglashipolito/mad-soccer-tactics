{"id":"../node_modules/stylus/lib/functions/range.js","dependencies":[{"name":"/Users/douglashipolito/Sites/mad-soccer/package.json","includedInParent":true,"mtime":1559260688352},{"name":"/Users/douglashipolito/Sites/mad-soccer/.babelrc","includedInParent":true,"mtime":1559259736018},{"name":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/package.json","includedInParent":true,"mtime":1559260686177},{"name":"../utils","loc":{"line":1,"column":20},"parent":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/functions/range.js","resolved":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/utils.js"},{"name":"../nodes","loc":{"line":2,"column":20},"parent":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/functions/range.js","resolved":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/nodes/index.js"}],"generated":{"js":"var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns a list of units from `start` to `stop`\n * by `step`. If `step` argument is omitted,\n * it defaults to 1.\n *\n * @param {Unit} start\n * @param {Unit} stop\n * @param {Unit} [step]\n * @return {Expression}\n * @api public\n */\n\nmodule.exports = function range(start, stop, step){\n  utils.assertType(start, 'unit', 'start');\n  utils.assertType(stop, 'unit', 'stop');\n  if (step) {\n    utils.assertType(step, 'unit', 'step');\n    if (0 == step.val) {\n      throw new Error('ArgumentError: \"step\" argument must not be zero');\n    }\n  } else {\n    step = new nodes.Unit(1);\n  }\n  var list = new nodes.Expression;\n  for (var i = start.val; i <= stop.val; i += step.val) {\n    list.push(new nodes.Unit(i, start.type));\n  }\n  return list;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/stylus/lib/functions/range.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"../node_modules/stylus/lib/functions/range.js":"var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns a list of units from `start` to `stop`\n * by `step`. If `step` argument is omitted,\n * it defaults to 1.\n *\n * @param {Unit} start\n * @param {Unit} stop\n * @param {Unit} [step]\n * @return {Expression}\n * @api public\n */\n\nmodule.exports = function range(start, stop, step){\n  utils.assertType(start, 'unit', 'start');\n  utils.assertType(stop, 'unit', 'stop');\n  if (step) {\n    utils.assertType(step, 'unit', 'step');\n    if (0 == step.val) {\n      throw new Error('ArgumentError: \"step\" argument must not be zero');\n    }\n  } else {\n    step = new nodes.Unit(1);\n  }\n  var list = new nodes.Expression;\n  for (var i = start.val; i <= stop.val; i += step.val) {\n    list.push(new nodes.Unit(i, start.type));\n  }\n  return list;\n};\n"},"lineCount":33}},"error":null,"hash":"372f04508e2d8033fcfa662dfb2cad4a","cacheData":{"env":{}}}