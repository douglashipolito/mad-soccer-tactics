{"id":"../node_modules/stylus/lib/functions/transparentify.js","dependencies":[{"name":"/Users/douglashipolito/Sites/mad-soccer/package.json","includedInParent":true,"mtime":1559260688352},{"name":"/Users/douglashipolito/Sites/mad-soccer/.babelrc","includedInParent":true,"mtime":1559259736018},{"name":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/package.json","includedInParent":true,"mtime":1559260686177},{"name":"../utils","loc":{"line":1,"column":20},"parent":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/functions/transparentify.js","resolved":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/utils.js"},{"name":"../nodes","loc":{"line":2,"column":20},"parent":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/functions/transparentify.js","resolved":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/nodes/index.js"}],"generated":{"js":"var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns the transparent version of the given `top` color,\n * as if it was blend over the given `bottom` color.\n *\n * Examples:\n *\n *     transparentify(#808080)\n *     => rgba(0,0,0,0.5)\n *\n *     transparentify(#414141, #000)\n *     => rgba(255,255,255,0.25)\n *\n *     transparentify(#91974C, #F34949, 0.5)\n *     => rgba(47,229,79,0.5)\n *\n * @param {RGBA|HSLA} top\n * @param {RGBA|HSLA} [bottom=#fff]\n * @param {Unit} [alpha]\n * @return {RGBA}\n * @api public\n */\n\nmodule.exports = function transparentify(top, bottom, alpha){\n  utils.assertColor(top);\n  top = top.rgba;\n  // Handle default arguments\n  bottom = bottom || new nodes.RGBA(255, 255, 255, 1);\n  if (!alpha && bottom && !bottom.rgba) {\n    alpha = bottom;\n    bottom = new nodes.RGBA(255, 255, 255, 1);\n  }\n  utils.assertColor(bottom);\n  bottom = bottom.rgba;\n  var bestAlpha = ['r', 'g', 'b'].map(function(channel){\n    return (top[channel] - bottom[channel]) / ((0 < (top[channel] - bottom[channel]) ? 255 : 0) - bottom[channel]);\n  }).sort(function(a, b){return a < b;})[0];\n  if (alpha) {\n    utils.assertType(alpha, 'unit', 'alpha');\n    if ('%' == alpha.type) {\n      bestAlpha = alpha.val / 100;\n    } else if (!alpha.type) {\n      bestAlpha = alpha = alpha.val;\n    }\n  }\n  bestAlpha = Math.max(Math.min(bestAlpha, 1), 0);\n  // Calculate the resulting color\n  function processChannel(channel) {\n    if (0 == bestAlpha) {\n      return bottom[channel]\n    } else {\n      return bottom[channel] + (top[channel] - bottom[channel]) / bestAlpha\n    }\n  }\n  return new nodes.RGBA(\n    processChannel('r'),\n    processChannel('g'),\n    processChannel('b'),\n    Math.round(bestAlpha * 100) / 100\n  );\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/stylus/lib/functions/transparentify.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}}],"sources":{"../node_modules/stylus/lib/functions/transparentify.js":"var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns the transparent version of the given `top` color,\n * as if it was blend over the given `bottom` color.\n *\n * Examples:\n *\n *     transparentify(#808080)\n *     => rgba(0,0,0,0.5)\n *\n *     transparentify(#414141, #000)\n *     => rgba(255,255,255,0.25)\n *\n *     transparentify(#91974C, #F34949, 0.5)\n *     => rgba(47,229,79,0.5)\n *\n * @param {RGBA|HSLA} top\n * @param {RGBA|HSLA} [bottom=#fff]\n * @param {Unit} [alpha]\n * @return {RGBA}\n * @api public\n */\n\nmodule.exports = function transparentify(top, bottom, alpha){\n  utils.assertColor(top);\n  top = top.rgba;\n  // Handle default arguments\n  bottom = bottom || new nodes.RGBA(255, 255, 255, 1);\n  if (!alpha && bottom && !bottom.rgba) {\n    alpha = bottom;\n    bottom = new nodes.RGBA(255, 255, 255, 1);\n  }\n  utils.assertColor(bottom);\n  bottom = bottom.rgba;\n  var bestAlpha = ['r', 'g', 'b'].map(function(channel){\n    return (top[channel] - bottom[channel]) / ((0 < (top[channel] - bottom[channel]) ? 255 : 0) - bottom[channel]);\n  }).sort(function(a, b){return a < b;})[0];\n  if (alpha) {\n    utils.assertType(alpha, 'unit', 'alpha');\n    if ('%' == alpha.type) {\n      bestAlpha = alpha.val / 100;\n    } else if (!alpha.type) {\n      bestAlpha = alpha = alpha.val;\n    }\n  }\n  bestAlpha = Math.max(Math.min(bestAlpha, 1), 0);\n  // Calculate the resulting color\n  function processChannel(channel) {\n    if (0 == bestAlpha) {\n      return bottom[channel]\n    } else {\n      return bottom[channel] + (top[channel] - bottom[channel]) / bestAlpha\n    }\n  }\n  return new nodes.RGBA(\n    processChannel('r'),\n    processChannel('g'),\n    processChannel('b'),\n    Math.round(bestAlpha * 100) / 100\n  );\n}\n"},"lineCount":64}},"error":null,"hash":"fceabbce55f47111ad09f5c2904208ea","cacheData":{"env":{}}}