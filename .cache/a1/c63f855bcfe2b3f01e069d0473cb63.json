{"id":"../node_modules/stylus/lib/functions/replace.js","dependencies":[{"name":"/Users/douglashipolito/Sites/mad-soccer/package.json","includedInParent":true,"mtime":1559260688352},{"name":"/Users/douglashipolito/Sites/mad-soccer/.babelrc","includedInParent":true,"mtime":1559259736018},{"name":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/package.json","includedInParent":true,"mtime":1559260686177},{"name":"../utils","loc":{"line":1,"column":20},"parent":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/functions/replace.js","resolved":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/utils.js"},{"name":"../nodes","loc":{"line":2,"column":20},"parent":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/functions/replace.js","resolved":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/nodes/index.js"}],"generated":{"js":"var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns string with all matches of `pattern` replaced by `replacement` in given `val`\n *\n * @param {String} pattern\n * @param {String} replacement\n * @param {String|Ident} val\n * @return {String|Ident}\n * @api public\n */\n\nmodule.exports = function replace(pattern, replacement, val){\n  utils.assertString(pattern, 'pattern');\n  utils.assertString(replacement, 'replacement');\n  utils.assertString(val, 'val');\n  pattern = new RegExp(pattern.string, 'g');\n  var res = val.string.replace(pattern, replacement.string);\n  return val instanceof nodes.Ident\n    ? new nodes.Ident(res)\n    : new nodes.String(res);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/stylus/lib/functions/replace.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"../node_modules/stylus/lib/functions/replace.js":"var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns string with all matches of `pattern` replaced by `replacement` in given `val`\n *\n * @param {String} pattern\n * @param {String} replacement\n * @param {String|Ident} val\n * @return {String|Ident}\n * @api public\n */\n\nmodule.exports = function replace(pattern, replacement, val){\n  utils.assertString(pattern, 'pattern');\n  utils.assertString(replacement, 'replacement');\n  utils.assertString(val, 'val');\n  pattern = new RegExp(pattern.string, 'g');\n  var res = val.string.replace(pattern, replacement.string);\n  return val instanceof nodes.Ident\n    ? new nodes.Ident(res)\n    : new nodes.String(res);\n};\n"},"lineCount":24}},"error":null,"hash":"b9ef1cfef9f47d4374acd211eff0b141","cacheData":{"env":{}}}