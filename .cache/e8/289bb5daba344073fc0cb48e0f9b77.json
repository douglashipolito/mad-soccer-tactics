{"id":"../node_modules/stylus/lib/functions/hsla.js","dependencies":[{"name":"/Users/douglashipolito/Sites/mad-soccer/package.json","includedInParent":true,"mtime":1559260688352},{"name":"/Users/douglashipolito/Sites/mad-soccer/.babelrc","includedInParent":true,"mtime":1559259736018},{"name":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/package.json","includedInParent":true,"mtime":1559260686177},{"name":"../utils","loc":{"line":1,"column":20},"parent":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/functions/hsla.js","resolved":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/utils.js"},{"name":"../nodes","loc":{"line":2,"column":20},"parent":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/functions/hsla.js","resolved":"/Users/douglashipolito/Sites/mad-soccer/node_modules/stylus/lib/nodes/index.js"}],"generated":{"js":"var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Convert the given `color` to an `HSLA` node,\n * or h,s,l,a component values.\n *\n * Examples:\n *\n *    hsla(10deg, 50%, 30%, 0.5)\n *    // => HSLA\n *\n *    hsla(#ffcc00)\n *    // => HSLA\n *\n * @param {RGBA|HSLA|Unit} hue\n * @param {Unit} saturation\n * @param {Unit} lightness\n * @param {Unit} alpha\n * @return {HSLA}\n * @api public\n */\n\nmodule.exports = function hsla(hue, saturation, lightness, alpha){\n  switch (arguments.length) {\n    case 1:\n      utils.assertColor(hue);\n      return hue.hsla;\n    case 2:\n      utils.assertColor(hue);\n      var color = hue.hsla;\n      utils.assertType(saturation, 'unit', 'alpha');\n      var alpha = saturation.clone();\n      if ('%' == alpha.type) alpha.val /= 100;\n      return new nodes.HSLA(\n          color.h\n        , color.s\n        , color.l\n        , alpha.val);\n    default:\n      utils.assertType(hue, 'unit', 'hue');\n      utils.assertType(saturation, 'unit', 'saturation');\n      utils.assertType(lightness, 'unit', 'lightness');\n      utils.assertType(alpha, 'unit', 'alpha');\n      var alpha = alpha.clone();\n      if (alpha && '%' == alpha.type) alpha.val /= 100;\n      return new nodes.HSLA(\n          hue.val\n        , saturation.val\n        , lightness.val\n        , alpha.val);\n  }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/stylus/lib/functions/hsla.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"../node_modules/stylus/lib/functions/hsla.js":"var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Convert the given `color` to an `HSLA` node,\n * or h,s,l,a component values.\n *\n * Examples:\n *\n *    hsla(10deg, 50%, 30%, 0.5)\n *    // => HSLA\n *\n *    hsla(#ffcc00)\n *    // => HSLA\n *\n * @param {RGBA|HSLA|Unit} hue\n * @param {Unit} saturation\n * @param {Unit} lightness\n * @param {Unit} alpha\n * @return {HSLA}\n * @api public\n */\n\nmodule.exports = function hsla(hue, saturation, lightness, alpha){\n  switch (arguments.length) {\n    case 1:\n      utils.assertColor(hue);\n      return hue.hsla;\n    case 2:\n      utils.assertColor(hue);\n      var color = hue.hsla;\n      utils.assertType(saturation, 'unit', 'alpha');\n      var alpha = saturation.clone();\n      if ('%' == alpha.type) alpha.val /= 100;\n      return new nodes.HSLA(\n          color.h\n        , color.s\n        , color.l\n        , alpha.val);\n    default:\n      utils.assertType(hue, 'unit', 'hue');\n      utils.assertType(saturation, 'unit', 'saturation');\n      utils.assertType(lightness, 'unit', 'lightness');\n      utils.assertType(alpha, 'unit', 'alpha');\n      var alpha = alpha.clone();\n      if (alpha && '%' == alpha.type) alpha.val /= 100;\n      return new nodes.HSLA(\n          hue.val\n        , saturation.val\n        , lightness.val\n        , alpha.val);\n  }\n};\n"},"lineCount":54}},"error":null,"hash":"056f066b5e4f87b309813eee2feb2e29","cacheData":{"env":{}}}